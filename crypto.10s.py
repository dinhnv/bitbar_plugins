#!/Users/dino/.pyenv/versions/3.6.2/envs/bitbar/bin/python

# <bitbar.title>CryptoX | Crypto Currency Monitoring</bitbar.title>
# <bitbar.version>v1.0</bitbar.version>
# <bitbar.author>dinhnv</bitbar.author>
# <bitbar.author.github>dinhnv</bitbar.author.github>
# <bitbar.desc>Statistics cryptocurrencies's profit</bitbar.desc>
# <bitbar.image></bitbar.image>
# <bitbar.dependencies>bash<bitbar.dependencies>

import sys
import requests
import asyncio
from ccxt import async as ccxt

IMG_MAP = {
    'MARKET': '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',
    'BTC': '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',
}


async def main(loop):
    print('CryptoX| image={}'.format(IMG_MAP['MARKET']))
    print('---')

    # markets = bittrex.fetch_markets()
    global_crypto = requests.get('https://api.coinmarketcap.com/v1/global/').json()
    print('Market Cap:\t\t${:,} B | href=https://livecoinwatch.com image={}'.format(
        int(global_crypto['total_market_cap_usd'] / 10 ** 9),
        IMG_MAP['MARKET'])
    )
    print('24h Vol:\t\t${:,} B | href=https://livecoinwatch.com image={}'.format(
        int(global_crypto['total_24h_volume_usd'] / 10 ** 9),
        IMG_MAP['MARKET']
    ))
    print('BTC %:\t\t{:,.2f}% | href=https://livecoinwatch.com image={}'.format(
        global_crypto['bitcoin_percentage_of_market_cap'],
        IMG_MAP['BTC']
    ))
    print('---')


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main(loop))
    except KeyboardInterrupt:
        sys.stderr.flush()
        print('\nInterrupted\n')
    finally:
        loop.stop()
        loop.run_forever()

        loop.close()
